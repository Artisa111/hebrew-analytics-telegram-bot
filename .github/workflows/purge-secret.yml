name: Purge secret from Git history

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "PURGE" to confirm you want to rewrite Git history'
        required: true
        default: ''

jobs:
  purge-secret:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Validate confirmation
      if: ${{ github.event.inputs.confirm != 'PURGE' }}
      run: |
        echo "‚ùå Operation cancelled. You must type 'PURGE' to confirm."
        exit 1
    
    - name: Check for SECRET_TO_PURGE
      run: |
        if [ -z "${{ secrets.SECRET_TO_PURGE }}" ]; then
          echo "‚ùå ERROR: SECRET_TO_PURGE repository secret is not set!"
          echo "Please add the secret in Settings ‚Üí Secrets and variables ‚Üí Actions"
          exit 1
        fi
        echo "‚úÖ SECRET_TO_PURGE is configured"
    
    - name: Checkout repository with full history
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ github.token }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install git-filter-repo
      run: |
        pip install git-filter-repo
        echo "‚úÖ git-filter-repo installed successfully"
    
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Create replacement file
      run: |
        # Create temporary replace file without echoing the secret
        echo "Creating replacement configuration..."
        cat > /tmp/replace.txt << 'EOF'
        ${{ secrets.SECRET_TO_PURGE }}==>REDACTED
        EOF
        echo "‚úÖ Replacement file created"
    
    - name: Backup current branch info
      run: |
        echo "Current branches:"
        git branch -a
        echo "Current tags:"
        git tag -l | head -10
    
    - name: Run git-filter-repo to purge secret
      run: |
        echo "üîÑ Starting Git history rewrite..."
        echo "This will replace all occurrences of the secret with 'REDACTED'"
        
        # Run git-filter-repo with the replacement file
        git filter-repo --force --replace-text /tmp/replace.txt
        
        echo "‚úÖ Git history rewrite completed"
    
    - name: Verify secret removal
      run: |
        echo "üîç Verifying secret has been removed from Git history..."
        
        # Search for the secret in all commits (GitHub will mask it in logs)
        if git log --all --full-history -- . | grep -q "${{ secrets.SECRET_TO_PURGE }}" 2>/dev/null; then
          echo "‚ùå ERROR: Secret still found in Git history!"
          exit 1
        fi
        
        # Search in current working tree
        if grep -r "${{ secrets.SECRET_TO_PURGE }}" . 2>/dev/null; then
          echo "‚ùå ERROR: Secret still found in working tree!"
          exit 1
        fi
        
        echo "‚úÖ Secret successfully removed from Git history"
    
    - name: Show statistics
      run: |
        echo "üìä Repository statistics after cleanup:"
        echo "Total commits: $(git rev-list --all --count)"
        echo "Total branches: $(git branch -a | wc -l)"
        echo "Total tags: $(git tag | wc -l)"
    
    - name: Force push all branches and tags
      run: |
        echo "üöÄ Force pushing rewritten history to origin..."
        
        # Add the original remote back (filter-repo removes it)
        git remote add origin https://github.com/${{ github.repository }}.git
        
        # Force push all branches
        git push origin --force --all
        
        # Force push all tags  
        git push origin --force --tags
        
        echo "‚úÖ All branches and tags have been force-pushed"
    
    - name: Cleanup
      if: always()
      run: |
        # Remove the temporary replace file
        rm -f /tmp/replace.txt
        echo "üßπ Cleanup completed"
    
    - name: Success message
      run: |
        echo "üéâ SECRET PURGE COMPLETED SUCCESSFULLY!"
        echo ""
        echo "‚ö†Ô∏è  IMPORTANT NEXT STEPS:"
        echo "1. All collaborators must reclone the repository or run:"
        echo "   git fetch origin"
        echo "   git reset --hard origin/main"
        echo ""
        echo "2. Check if any open PRs need to be recreated"
        echo ""
        echo "3. Re-enable branch protection rules if they were disabled"
        echo ""
        echo "4. The secret has been replaced with 'REDACTED' in all commits"
        echo "5. Consider rotating the secret if this repository was ever public"